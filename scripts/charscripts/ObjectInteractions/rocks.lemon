//# address-hook(0x01fd08) end(0x01ff1a)
function void fn01fd08()
{
	if (XtraChar != 1)
	{
		base.fn01fd08()
		return
	}
	u16[A0 + 0x30] = u16[0xffffb018]
	u16[A0 + 0x36] = u16[0xffffb062]

	D1 = objA0.box_size.x + 11
	D2 = objA0.box_size.y
	D3.u16 = D2.u16 + 1
	D4.u16 = objA0.position.x.u16
	fn01dc56()

	D6 = (D6 << 16) + (D6 >> 16)
	if (D6.u16 & 0x03)
	{
		bool canBreakWall = false

		A1 = 0xffffb000
		D1.u16 = u16[A0 + 0x30]
		if (D6.u16 & 0x01)
		{
			if (u8[A1 + 0x38] == CHARACTER_KNUCKLES)
			{
				// Knuckles can break all walls
				canBreakWall = true
			}
			else
			{
				if ((objA0.subtype2c & 0x80) == 0)	// Special Knuckles-only wall?
				{
					if (super.active)
					{
						// Super form breaks walls even when going slow
						canBreakWall = true
					}
					else if (u8[A1 + 0x2f] == 2) // is the player using the screw kick?
					{
						canBreakWall = true
					}
					else if ((objA0.flags2a & 0x20) || (u8[A1 + 0x2b] & char.bonus.SHIELD_FIRE))
					{
						// Normal Sonic and Tails need to quickly roll into a wall to break it (this includes the fire shield attack)
						canBreakWall = (objA1.state == char.state.ROLLING && abs(D1.s16) >= 0x480)
					}
				}
			}

			if (canBreakWall)
			{
				objA0.flags2a &= ~0x20
				Rocks.BreakWall()

				if (objA0.flags2a & 0x40)
				{
					// Check for second character
					A1 = 0xffffb04a
					if (u8[A1 + 0x38] == CHARACTER_KNUCKLES || objA1.state == char.state.ROLLING)
					{
						objA1.velocity.x = u16[A0 + 0x36]
						u16[A1 + 0x1c] = objA1.velocity.x
						objA0.flags2a &= ~0x40
						objA1.flags2a &= ~char.flag.PUSHING
					}
				}
			}
		}

		if (!canBreakWall)
		{
			// Give second character a try
			A1 = 0xffffb04a
			D1.u16 = u16[A0 + 0x36]

			if (objA0.flags2a & 0x40)
			{
				if (u8[A1 + 0x38] == CHARACTER_KNUCKLES)
				{
					// Knuckles can break all walls
					canBreakWall = true
				}
				else
				{
					if ((objA0.subtype2c & 0x80) == 0)	// Special Knuckles-only wall?
					{
						// Normal Sonic and Tails need to quickly roll into a wall to break it (this includes the fire shield attack)
						canBreakWall = (objA1.state == char.state.ROLLING && abs(D1.s16) >= 0x480)
					}
				}
			}

			if (canBreakWall)
			{
				objA0.flags2a &= ~0x40
				Rocks.BreakWall()
				return
			}
		}
	}

	if (competition_mode.active == 0)
	{
		if (checkForUnloadObjectAtPosition(objA0.countdown_value))
			return
	}
	DrawObject()
}

function void Rocks.BreakWall()
{
	if (XtraChar != 1)
	{
		base.Rocks.BreakWall()
		return
	}
	
	fn01ff1e()
	if (competition_mode.active == 0)
	{
		objA1.velocity.x = D1.u16
		D0.u16 = objA0.position.x.u16
		if (D0.u16 >= objA1.position.x.u16)
		{
			objA1.position.x.u16 -= 4
			A4 = 0x020314
		}
		else
		{
			objA1.position.x.u16 += 4
			A4 = 0x0202f4
		}

		u16[A1 + 0x1c] = objA1.velocity.x
		u8[A1 + 0x2a] &= ~0x20
		if (u8[A1 + 0x38] == CHARACTER_KNUCKLES && u8[A1 + 0x2f] == 0x01)
		{
			u8[A1 + 0x2f] = 0x02
			u8[A1 + 0x20] = 0x21
			if (objA1.velocity.x < 0)
				u8[A1 + 0x2a] |= 0x01
			else
				u8[A1 + 0x2a] &= ~0x01
		}

		D0 = objA0.animation.sprite
		if (global.zone == 0x09)		// Lava Reef Zone
		{
			D0 = (D0 - 4) * 2
			objA0.update_address = 0x01fc66
			fn0201de()
		}
		else
		{
			D0 *= 2
			objA0.update_address = 0x01fc16
			fn02013a()
		}
		fn01fc16()

	#if STANDALONE
		// Prevent this object from respawning
		//  -> Otherwise the rocks next to the first AIZ 1 giant ring may respawn after the special stage
		objA0.respawn_entry = 0
	#endif
	}
	else
	{
		// Competition mode code
		objA1.velocity.x = D1.u16
		D0.u16 = objA0.position.x.u16
		if (D0.u16 >= objA1.position.x.u16)
		{
			objA1.position.x.u16 -= 4
			A4 = 0x020388
		}
		else
		{
			objA1.position.x.u16 += 4
			A4 = 0x020370
		}

		u16[A1 + 0x1c] = objA1.velocity.x
		u8[A1 + 0x2a] &= ~0x20
		fn01fcc8()
		objA0.update_address = 0x01fcae
		objA0.animation.sprite = 3
		D0 = objA0.animation.sprite * 2
		fn02013a()
		fn01fcae()
	}
}