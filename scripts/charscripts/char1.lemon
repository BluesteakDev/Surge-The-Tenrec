function void Slot1Char()
{
	global.characters = CHARS_SONIC_ALONE
}

function u64 getCharacterBonusTextIcon(u8 character)
{
	return (XtraChar == 1) ? "hud_bonus_icon_green" : base.getCharacterBonusTextIcon(character)
}

define u16 continueHUD.y = 185
define u16 continueHUD.x = 20

global u8 SurgeCombo = 0
global u8 SurgeChargedSpindash = 0

global u8 SurgeAfterImageTimer = 0

global u16 AngleOfLine

global bool LineEffect

//# address-hook(0x010a94) end(0x010ae8)
function void Character.BaseUpdate.Sonic()
{
	if (XtraChar == 1)
	{
		// Discord RPC
		u64 Name = "Surge"
		if (global.chaos_emeralds == 0 && global.super_emeralds == 0)
			Game.setDiscordDetails(Name)
		else if (global.super_emeralds == 0)
		{
			Game.setDiscordDetails(stringformat("%s (%d Chaos Emerald%s)", Name, global.chaos_emeralds, (global.chaos_emeralds == 1) ? "" : "s"))
			if (global.chaos_emeralds == 7)
				Game.setDiscordDetails(stringformat("%s (All Chaos Emeralds)", Name))
		}
		else if (global.super_emeralds > 0)
		{
			Game.setDiscordDetails(stringformat("%s (%d Super Emerald%s)", Name, global.super_emeralds, (global.super_emeralds == 1) ? "" : "s"))
			if (global.super_emeralds == 7)
				Game.setDiscordDetails(stringformat("%s (All Super Emeralds)", Name))
		}
		Game.setDiscordSmallImage("character_unknown")

		// Gravity & Hitbox (Surge Ability)
		if (char.double_jump_state == 2)
		{
			// Insta-shield makes Sonic briefly invincible and increases his hitbox
			u8 oldBonusEffect = char.bonus_effect
			char.bonus_effect |= char.bonus.INVINCIBLE
		#if STANDALONE
			// Also make insta-shield bounce off projectiles
			char.bonus_effect |= char.bonus.ANY_SHIELD
		#endif

			// Larger hitbox
			D2.u16 = char.position.x.u16 - 0x18
			D3.u16 = char.position.y.u16 - 0x18
			D4.u16 = 0x30
			D5.u16 = 0x30
			Character.CheckCollisionsWithDynamicObjects_partial()

			char.bonus_effect = oldBonusEffect

			char.velocity.y += 0x3f
		}
		else
		{
			SurgeCombo = 0
		}

		if (char.state != char.state.SPINDASH)
			SurgeChargedSpindash = 0

		if (SurgeAfterImageTimer != 0)
			SurgeAfterImageTimer--

		if (SurgeChargedSpindash >= 16)
			SurgeChargedSpindash = 16
	}

	base.Character.BaseUpdate.Sonic()
}

function void SonicPressedJumpInMidAir()
{
	if (XtraChar != 1) // Surge Ability
	{
		base.SonicPressedJumpInMidAir()
		return 
	}
	char.double_jump_state = 2
	char.velocity.x += (char.flags & char.flag.FACING_LEFT) ? -0x250 : 0x250
	char.velocity.y = -0x800
	char.jumping = 0
	playSound(0xa0)
	playSound(SFX_INSTASHIELD)
	playSound(SFX_LIGHTNINGJUMP)
	playSound(SFX_SPINDASH_RELEASE)
	playSound(0x40)
	playSound(0x79)

	if (surge.screenshake == 0x01)
	{
		camera.screenshake.state = 0xb
		camera.hyper_knux_shake = 0xb
	}

	if (surge.lightningfx == 0x01)
		LightningShield.CreateSparks()

	SurgeAfterImageTimer = 10
}

function void Character.LandingOnGroundResetState()
{
	if (XtraChar != 1) // Surge Ability
	{
		base.Character.LandingOnGroundResetState()
		return 
	}
	char.flags &= ~char.flag.IN_AIR
	char.flags &= ~char.flag.PUSHING
	char.flags &= ~char.flag.CONTROL_LOCK
	char.jumping = 0
	score.bonus_counter = 0		// No more increasing bonusses after hitting the ground
	char.rotation.x = 0
	u8[A0 + 0x2d] = 0
	u8[A0 + 0x30] = 0
	char.look_up_down_timer = 0

	// Check for double jump state
	if (char.double_jump_state != 0)
	{
		char.double_jump_state = 0
	}
}



//# address-hook(0x024090) end(0x0240dc)
function void Spikes.Update()
{
	fn0242b6()

	D1 = objA0.box_size.x + 11
	D2 = objA0.box_size.y
	D3.u16 = D2.u16 + 1
	D4.u16 = objA0.position.x.u16
	fn01dc56()

	if (objA0.flags2a & 0x08)
	{
		A1 = 0xffffb000
		DamageCharacter()
	}

	if (objA0.flags2a & 0x10)
	{
		A1 = 0xffffb04a
		DamageCharacter()
	}

	D0.u16 = u16[A0 + 0x30]
	DrawOrUnloadObjectByD0()
}

function bool Character.updateSuperPeelout()
{
	u8 input_state   = control.player1.state
	u8 input_pressed = control.player1.pressed

	if (XtraChar == 1)
	{
		bool canStartPeelout = (char.state == char.state.LOOKING_UP) && (input_pressed & CONTROL_ABC) && (player1.control_override == 0)	// Last check is needed in cutscenes (e.g. end of MHZ 2)
		if (!canStartPeelout)
		{
			// Nothing to see here
			return false
		}

		/*

		Disable for now, breaks everything

		if (ring_counter >= 25) && !(char.bonus_effect & char.bonus.SHIELD_LIGHTNING) // Buy Lightning Shield
		{
			ring_counter -= 25
			fn06122a() // Apply Lightning Shield
		}

		*/

		return true
	}
	else
	{
		return base.Character.updateSuperPeelout()
	}
}

//# address-hook(0x00ffd4) end(0x010214)
function void Character.OnCollisionWithDynamicObject()
{
	if (XtraChar == 1)
	{
		D1.u8 = u8[A1 + 0x28] & 0xc0
		if (D1.u8 == 0)
		{
			// Collision is an enemy, i.e. is harmful, but can be attacked
			bool attacking = false
			if (char.bonus_effect & char.bonus.INVINCIBLE) || (char.double_jump_state == 2)
			{
				attacking = true
			}
			else if (char.state == char.state.ROLLING || char.state == char.state.SPINDASH)
			{
				attacking = true
			}
		#if STANDALONE
			else if (Game.getSetting(SETTING_DROPDASH) && char.character == CHARACTER_SONIC && char.state == char.state.SONIC_DROPDASH)
			{
				attacking = true
			}
		#endif

			if (!attacking)
			{
				bool isThreat = false
				if (char.character == CHARACTER_KNUCKLES)
				{
					isThreat = (char.double_jump_state != 1 && char.double_jump_state != 3)
				}
				else if (char.character == CHARACTER_SONIC || char.double_jump_state == 0 || (char.flags & char.flag.UNDERWATER))
				{
					isThreat = true
				}
				else
				{
					s16 dx = char.position.x.u16 - objA1.position.x.u16
					s16 dy = char.position.y.u16 - objA1.position.y.u16
					D0.u8 = lookupAngleByVector(dx, dy) - 0x20
					isThreat = (D0.u8 >= 0x40)
				}

				if (isThreat)
				{
					Character.OnThreatCollision()
					return
				}
			}

			if (u8[A1 + 0x29] != 0)
			{
				char.velocity.x = -char.velocity.x
				char.velocity.y = -char.velocity.y
				char.groundspeed = -char.groundspeed

				SurgeComboCheck()

				u8[A1 + 0x1c] = A0.u8
				u8[A1 + 0x25] = u8[A1 + 0x28]
				u8[A1 + 0x28] = 0
				--u8[A1 + 0x29]
				if (u8[A1 + 0x29] == 0)
				{
					u8[A1 + 0x2a] |= 0x80
				}
			}
			else
			{

				if (u8[A1 + 0x2a] & 0x04)
				{
					A2 = 0xffff0000 + u16[A1 + 0x3c]
					u8[A2] &= ~(1 << u8[A1 + 0x3b])
				}

				u8[A1 + 0x2a] |= 0x80

				// Grant bonus points
				Enemy.addScore(A1, 0x010216)

				objA1.update_address = 0x01e5e0
				u8[A1 + 0x05] = 0
				if (char.velocity.y < 0)
				{
					char.velocity.y += 0x100
				}
				else if (char.position.y.u16 >= objA1.position.y.u16)
				{
					char.velocity.y -= 0x100
				}
				else
				{
					char.velocity.y = -char.velocity.y
				}

				SurgeComboCheck()
			}
		}
		else if (D1.u8 == 0x40)
		{
			D0.u8 = u8[A1 + 0x28] & 0x3f
			if (D0.u8 != 0x06)
			{
				// Collect ring, but only after 30 invulnerability frames
				//  -> Remember that the "char.invuln.countdown" timer starts at 120
				u8 timer = competition_mode.active ? char.invuln.countdown : u8[0xffffb034]
				if (timer < 90)
				{
					u8[A1 + 0x05] = 0x04
				}
			}
			else
			{
				// This part seems to be for monitors specifically
				s16 vy = (global.inv_gravity) ? -char.velocity.y : char.velocity.y
				bool movingUp = (objA1.render_flags & render_flag.FLIP_Y) ? (vy > 0) : (vy < 0)
				if (movingUp)
				{
					if (u8[A1 + 0x2a] & char.flag.IN_AIR)
					{
						if ((objA1.render_flags & render_flag.FLIP_Y) == 0)
						{
							if (char.position.y.u16 - 0x10 < objA1.position.y.u16)
								return
						}
						else
						{
							if (char.position.y.u16 + 0x10 >= objA1.position.y.u16)
								return
						}

						char.velocity.y = -char.velocity.y
						objA1.velocity.y = -0x180

						SurgeComboCheck()

						if (u8[A1 + 0x3c] == 0)
							u8[A1 + 0x3c] = 4

						return
					}
					else
					{
					#if STANDALONE
						// In S3AIR, do not allow S&K's monitor opening from the side
						//  -> This is done to be more consistent with other Sonic games, incl. Sonic 1, 2, CD, Mania and even Sonic 3 alone
						//  -> The first check above tells us if the character is on a side of the monitor
						//  -> The second one makes sure that you can always ground-based roll into a monitor (see e.g. first invincibility in MHZ 1, when spindashing into it from the right)
						if ((u8[A1 + 0x2a] & char.flag.PUSHING) && (char.flags & char.flag.IN_AIR))
						{
							return
						}
						// TODO: Unfinished code here -- it works, but the falling monitor can crush the player, and is this really what we want?
					/*
						else
						{
							// Hit monitor from below, make it fall
							u8[A1 + 0x3c] = 1

							char.velocity.y = -char.velocity.y
							objA1.velocity.y = -0x180
							if (u8[A1 + 0x3c] == 0)
								u8[A1 + 0x3c] = 4
							return
						}
					*/
					#endif
					}
				}

				if (A0 != 0xffffb000 && competition_mode.active == 0)
				{
					// Sorry player 2, you can't open monitors in normal game
					return
				}

				bool canOpenMonitor = false
				if (char.state == char.state.ROLLING)
				{
					canOpenMonitor = true
				}
			#if STANDALONE
				else if (Game.getSetting(SETTING_DROPDASH) && char.character == CHARACTER_SONIC && char.state == char.state.SONIC_DROPDASH)
				{
					canOpenMonitor = true
				}
			#endif
				else if (char.character == CHARACTER_KNUCKLES)
				{
					canOpenMonitor = (char.double_jump_state == 1 || char.double_jump_state == 3)
				}

				if (canOpenMonitor)
				{
				#if STANDALONE
					if (!movingUp)
				#endif
					{
						// Bounce off
						char.velocity.y = -char.velocity.y
						char.double_jump_state = 0
						SurgeComboCheck()
					}
					u8[A1 + 0x05] = 4
					u16[A1 + 0x42] = A0.u16
				}
			}
		}
		else if (D1.u8 == 0x80) && (char.double_jump_state != 2)
		{
			// Harmful object
			Character.OnThreatCollision()
		}
		else  // D1.u8 == 0xc0
		{
			// Other interactable object
			fn0103ba()
		}
	}
	else
	{
		base.Character.OnCollisionWithDynamicObject()
		return
	}

	// base.Character.OnCollisionWithDynamicObject()
}

function void SurgeComboCheck()
{
	// if (!LineEffect)
	// {
		// LineEffect = true
	// }
	if (char.double_jump_state == 2) // Combo Counter
	{
		AngleOfLine = getRandomNumber() & 255
		SurgeCombo++

		if (surge.hiteffects == 0x01)
			Surge.SpawnLinesEffect() // Newtrogic Panic moment

		if (surge.screenshake == 0x01)
		{
			camera.screenshake.state = 0x14
			camera.hyper_knux_shake = 0x14
		}

		playSound(0x85)

		SurgeAfterImageTimer = 5

		if (SurgeCombo >= 3) // Add score for high combo
		{
			Enemy.addScore(A1, 0x010216)
			SurgeAfterImageTimer = 15
		}
	}
}

function u64 Slot1MonitorKeys(u8 type)
{
	if (type == 0)
		return "monitor_icon_static"
	else if (type == 0x01)
		return "monitor_icon_surge"
	else if (type == 0x02)
		return "monitor_icon_robotnik"
	else if (type == 0x03)
		return "monitor_icon_ring"
	else if (type == 0x04)
		return ("monitor_surge_shoe")
	else if (type == 0x05)
		return "monitor_icon_fireshield"
	else if (type == 0x06)
		return "monitor_icon_lightningshield"
	else if (type == 0x07)
		return "monitor_icon_bubbleshield"
	else if (type == 0x08)
		return "monitor_icon_invincibility"
	else if (type == 0x09)
		return "monitor_icon_super"
	else if (type == 0x0b)
		return "monitor_icon_classicshield"

	return 0
}

//# address-hook(0x00db44) end(0x00dbb2)
function bool XtraOneHUD()
{
#if STANDALONE
	if (DEBUG_DISABLE_HUD)
		return false
#endif

	s16 baseX = global.level_started
	if (baseX < 0)
	{
		baseX += 8
		global.level_started = baseX
	}
	baseX += 0x0f
	s16 baseY = 0x08
	u16 renderQueue = 0xe000

	bool isBonusStage = (global.zone >= 0x13 && global.zone <= 0x15)
#if STANDALONE
	if (!debug_mode.state)
	{
		if (!isBonusStage)
		{
			// Score
			HUD.drawSprite( "hud_text_score", baseX, baseY, renderQueue)
			++renderQueue
			HUD.drawNumber("hud_digit_%d", player.score * 10, baseX + 0x58, baseY, renderQueue)
			++renderQueue

			// Continue hud mod
			if (Renderer.hasCustomSprite("soniccont"))
			{
				u64 key = "Continue_Icon"

				if (Mods.isModActive("Continues HUD"))
				{
					Renderer.drawCustomSprite(key, baseX + continueHUD.x - 11, continueHUD.y + 13, 0, SPRITE_FLAG_PRIO, 0xe000, 0,255)

					if (continues_counter >= 10)
					{
						HUD.drawSmallDigit(u16((continues_counter / 10) % 10), baseX + continueHUD.x, continueHUD.y, 0xe000)
						HUD.drawSmallDigit(u16(continues_counter % 10), baseX + continueHUD.x + 8, continueHUD.y, 0xe000)
					}
					else
						HUD.drawSmallDigit(u16(continues_counter % 10), baseX + continueHUD.x, continueHUD.y, 0xe000)
				}
				else if (Mods.isModActive("Continues HUD Extra"))
				{
					u16 continuetick = 0
					u16 continuemove = 0
					u16 continuemove.y = -13
					while (continuetick < continues_counter)
					{
						Renderer.drawCustomSprite(key, baseX + continueHUD.x - 11 + continuemove, max(continueHUD.y - continuemove.y, 0), 0, SPRITE_FLAG_PRIO, 0xe000, 0,255)
						continuemove += 21
						++continuetick
						if (continuemove > 370)
						{
							continuemove = 0
							continuemove.y += 26
						}
					}
				}
			}

			// Time
			{
				bool show = (timer.minutes < 9 || isBonusStage || (level.framecounter & 0x08) || Game.getSetting(SETTING_INFINITE_TIME))
				HUD.drawSprite(show ? "hud_text_time" : "hud_text_time_red", baseX, baseY + 0x10, renderQueue)
				++renderQueue

				// Unfortunately, the time progress is done later inside the frame, so we don't have the right value in "timer.frames" yet
				//  -> If the conditions for time progress are met, add one and everything will be alright
				u16 minutes = timer.minutes
				u16 seconds = timer.seconds
				u16 frames = timer.frames
				if (hud.dirty.timer && !global.game.paused && timer.alldata < 0x93b3b)	// That is 9:59 and 59 frames
				{
					++frames
					seconds += (frames / 60)
					minutes += (seconds / 60)
					frames %= 60
					seconds %= 60
				}
				u16 centiseconds = (frames * 99 + 30) / 59

				u16 px = (minutes >= 10) ? (baseX + 8) : baseX
				if (Game.getSetting(SETTING_EXTENDED_HUD))
				{
					if (minutes >= 10)
						HUD.drawDigit(minutes / 10, px + 0x20, baseY + 0x10, renderQueue)
					HUD.drawDigit(minutes % 10, px + 0x28, baseY + 0x10, renderQueue)
					HUD.drawSprite("hud_char_minutes", px + 0x30, baseY + 0x10, renderQueue)
					HUD.drawDigit(seconds / 10, px + 0x38, baseY + 0x10, renderQueue)
					HUD.drawDigit(seconds % 10, px + 0x40, baseY + 0x10, renderQueue)
					HUD.drawSprite("hud_char_seconds", px + 0x48, baseY + 0x10, renderQueue)
					HUD.drawDigit(centiseconds / 10, px + 0x50, baseY + 0x10, renderQueue)
					if (minutes < 10)
						HUD.drawDigit(centiseconds % 10, px + 0x58, baseY + 0x10, renderQueue)
				}
				else
				{
					if (minutes >= 10)
						HUD.drawDigit(minutes / 10, px + 0x20, baseY + 0x10, renderQueue)
					HUD.drawDigit(minutes % 10, px + 0x28, baseY + 0x10, renderQueue)
					HUD.drawSprite("hud_char_colon", px + 0x30, baseY + 0x10, renderQueue)
					HUD.drawDigit(seconds / 10, px + 0x38, baseY + 0x10, renderQueue)
					HUD.drawDigit(seconds % 10, px + 0x40, baseY + 0x10, renderQueue)
				}
				++renderQueue
			}
		}

		// Rings
		{
			u16 py = (isBonusStage) ? baseY : baseY + 0x20
			bool show = (ring_counter != 0 || (level.framecounter & 0x08))
			HUD.drawSprite(show ? "hud_text_rings" : "hud_text_rings_red", baseX, py, renderQueue)
			++renderQueue

			u16 px = baseX + (!isBonusStage && Game.getSetting(SETTING_EXTENDED_HUD) ? 0x58 : 0x40)
			for (u32 value = ring_counter;;)
			{
				HUD.drawDigit(value % 10, px, py, renderQueue)
				px -= 8
				value /= 10
				if (value == 0)
					break
			}
			++renderQueue
		}

		// Lives (not visible in Time Attack)
		if (!Game.isTimeAttack() && !Game.getSetting(SETTING_INFINITE_LIVES))
		{
			bool useMobilePosition = HUD.useMobileLivesDisplay()
			u16 px = useMobilePosition ? (getScreenWidth() - baseX - 0x30) : baseX
			u16 py = useMobilePosition ? baseY : 200
			
			u64 characterName = "Surge"
			HUD.drawSprite(stringformat("hud_lives_icon_%s", characterName), px, py, renderQueue)
			++renderQueue

			if (lives_counter < 100)
			{
				if (lives_counter >= 10)
					HUD.drawSmallDigit(u16((lives_counter / 10) % 10), px + 0x20, py + 8, renderQueue)
				HUD.drawSmallDigit(u16(lives_counter % 10), px + 0x28, py + 8, renderQueue)
			}
			else
			{
				if (lives_counter >= 100)
					HUD.drawSmallDigit(u16((lives_counter / 100) % 10), px + 0x20, py + 8, renderQueue)
				if (lives_counter >= 10)
					HUD.drawSmallDigit(u16((lives_counter / 10) % 10), px + 0x28, py + 8, renderQueue)
				HUD.drawSmallDigit(u16(lives_counter % 10), px + 0x30, py + 8, renderQueue)
			}
		}
	}
	else
#endif
	{
		D4 = (isBonusStage) ? 8 : 0

		if ((level.framecounter & 0x08) == 0)
		{
			if (ring_counter == 0)
			{
				D4 += 2
			}
			if (timer.minutes == 9 && !isBonusStage)
			{
				D4 += 4
			}
		}

		// Targets:
		//  - 0x00dbc2	-> D4.u16 = 0x00
		//  - 0x00dc00	-> D4.u16 = 0x02
		//  - 0x00dc32	-> D4.u16 = 0x04
		//  - 0x00dc96	-> D4.u16 = 0x08
		//  - 0x00dcb6	-> D4.u16 = 0x0a
		A1 = tableLookupAddress(0x00dbb6, D4.u16)

		D4.s16 = u16[A1] - 1
		D0.s16 = baseX + 0x80
		D1.u16 = 0x0108
		D5.u16 = 0x86ca
		A1 += 2
		if (D4.s16 >= 0)
		{
			writeToSpriteTable(renderQueue)
		}
	}

	//Because we want to disable the normal HUD, return true
	return true
}

//# translated(0x011bde) end(0x011cf0)
//# translated(0x011d16) end(0x011da4)
//# translated(0x0151fc) end(0x01530c)
//# translated(0x015332) end(0x0153c0)
function bool Character.UpdateSpindash()
{
	if (XtraChar == 1)
	{
	#if STANDALONE
		// Ignore this while charging the Super Peel-Out
		if (char.spindash == 0x80)
			return false
	#endif

		u8 input_state   = (char.character == CHARACTER_TAILS) ? control.tails.state   : control.player1.state
		u8 input_pressed = (char.character == CHARACTER_TAILS) ? control.tails.pressed : control.player1.pressed

		if (char.spindash == 0)
		{
			bool canStartSpindash = (char.state == char.state.COWERING) && (input_pressed & CONTROL_ABC)
			if (!canStartSpindash)
			{
				// Nothing to see here
				return false
			}

			// Start spindash
			char.state = char.state.SPINDASH
			playSound(SFX_SPINDASH_CHARGE)

			char.spindash = 1
			char.spindash_charge = 0
			if (char.drown_countdown >= 12)
			{
				// Set state of dust cloud object to 0x02
				u8[A6 + 0x20] = 0x02
			}
		}
		else
		{
			if (input_state & CONTROL_DOWN)
			{
				// Update spindash
				if (char.spindash_charge > 0)
				{
					char.spindash_charge -= char.spindash_charge >> 5
					if (s16(char.spindash_charge) < 0)
						char.spindash_charge = 0
				}

				if (input_pressed & CONTROL_ABC)
				{
					// Charge up
					char.state.both = 0x0900
					char.spindash_charge = min(char.spindash_charge + 0x200, 0x800)
					playSound(SFX_SPINDASH_CHARGE)

					SurgeChargedSpindash++

					if (SurgeChargedSpindash >= 8)
					{
						playSound(0x79)
						playSound(0x8e)
						playSound(0xa4)
						playSound(0xc5)
						playSound(0xd9)

						if (surge.screenshake == 0x01)
						{
							if (SurgeChargedSpindash >= 16)
							{
								camera.screenshake.state = 0x14
								camera.hyper_knux_shake = 0x14
							}
							else
							{
								camera.screenshake.state = 0xb
								camera.hyper_knux_shake = 0xb
							}
						}

						if (surge.lightningfx == 0x01)
							LightningShield.CreateSparks()
					}
				}
			}
			else
			{
				releaseSpindash()
			}

			// Center camera y-offset again
			centerCameraYOffset()
		}

		Character.CheckAgainstMoveBorders()
		Character.UpdateRotationOnGround()
		partialUpdateCharacterOnGround()

		return true
	}
	else
	{
		return base.Character.UpdateSpindash()
	}
}

function void releaseSpindash()
{
	if (XtraChar == 1)
	{
		u32 baseAddress
		s8 dy = 5
		if (char.character != CHARACTER_TAILS)
		{
			baseAddress = (super.active) ? 0x011d04 : 0x011cf2
		}
		else
		{
			baseAddress = (super.active.tails) ? 0x015320 : 0x01530e
			dy = 1
		}
		D0 = u16(char.spindash_charge >> 8) * 2
		if (SurgeChargedSpindash >= 8)
			char.groundspeed = s16[baseAddress + D0] * 2
		else
			char.groundspeed = s16[baseAddress + D0]

		char.position.y.u16 += (global.inv_gravity) ? -dy : dy

		D0.u16 = (char.groundspeed - 0x800) * 2
		D0.u16 = 0x2000 - (D0.u16 & 0x1f00)

		// Camera delay
		if (A0 == 0xffffb000) && !(SurgeChargedSpindash >= 8)
		{
		#if STANDALONE
			// This does not hurt
			ClearPositionBackup()
		#endif
			camera.locktime.player1 = D0.u16
		}
		else
		{
			camera.locktime.player2 = D0.u16
		}

		if (char.flags & char.flag.FACING_LEFT)
		{
			char.groundspeed = -char.groundspeed
		}

		if (SurgeChargedSpindash >= 8)
			char.groundspeed += (char.flags & char.flag.FACING_LEFT) ? 0x450 : -0x450

		// Tell dust cloud object to disappear again
		u8[A6 + 0x20] = 0

		// Release spindash!
		char.hitbox_extends.x = 7
		char.hitbox_extends.y = 14
		char.spindash = 0
		char.state = char.state.ROLLING
		char.flags |= char.flag.ROLLING

		playSound(SFX_SPINDASH_RELEASE)

		if (SurgeChargedSpindash >= 8)
		{
			playSound(0x40)
			playSound(0x79)
			if (surge.screenshake == 0x01)
			{
				camera.screenshake.state = 0x14
				camera.hyper_knux_shake = 0x14
			}

			if (surge.lightningfx == 0x01)
				LightningShield.CreateSparks()

			SurgeAfterImageTimer = 30
		}
	}
	else
	{
		base.releaseSpindash()
	}
}

function void SonicUpdateRingCollection()
{
	if (XtraChar == 1)
	{
		// Shortly after getting hit, you can't collect rings
		if (char.invuln.countdown >= 90)
			return

		u16 box.pos.x
		u16 box.pos.y
		u16 box.size.x
		u16 box.size.y

		if (char.bonus_effect & char.bonus.SHIELD_LIGHTNING) || (SurgeChargedSpindash >= 16)
		{
			box.pos.x = char.position.x.u16 - 0x40
			box.pos.y = char.position.y.u16 - 0x40
			box.size.x = 0x80
			box.size.y = 0x80
		}
		else
		{
			box.size.y = char.hitbox_extends.y - 0x03
			box.pos.x = char.position.x.u16 - 0x08
			box.pos.y = char.position.y.u16 - box.size.y
			box.size.x = 0x10
			box.size.y *= 2
		}

		// Cycle through list of all rings with x-position in screen area
		A1 = rings.around.first
		A2 = rings.around.last
		A4 = 0xffff0000 + rings.around.first.state

		while (A1 != A2)
		{
			// Check if already collected
			if (u16[A4] == 0)
			{
				u16 ring.x = u16[A1 + 0]
				u16 ring.y = u16[A1 + 2]

				s16 ring.offset = 6
				s16 ring.size = 12

				u16 px = ring.x - ring.offset
				u16 py = ring.y - ring.offset

			#if STANDALONE
				// Consider vertical level wrap
				if (level.vertical_wrap == 0xff00)
				{
					s16 dy = py - box.pos.y
					if (dy < -s16(level.height.bitmask)/2)
					{
						py += (level.height.bitmask + 1)
					}
					else if (dy > level.height.bitmask/2)
					{
						py -= (level.height.bitmask + 1)
					}
				}
			#endif

				if (checkBoxOverlap(box.pos.x, box.pos.y, box.size.x, box.size.y, px, py, ring.size, ring.size))
				{
					if (char.bonus_effect & char.bonus.SHIELD_LIGHTNING) || (SurgeChargedSpindash >= 16)
					{
						if (makeDynamicRing())
							return
					}

					// Start ring animation, ring counts as collected now
					u16[A4] = 0x0604

					// Collect this ring
					CollectLevelRing()

					// This seems to be some kind of table of the currently animated rings
					A3 = 0xffffef82
					while (u16[A3] != 0)
					{
						A3 += 2
					}
					u16[A3] = A4.u16

					++u16[0xffffef80]
				}
			}

			A1 += 4
			A4 += 2
		}
	}
	else
	{
		base.SonicUpdateRingCollection()
	}
		
}