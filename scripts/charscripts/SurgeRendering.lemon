global u16 kickrotate = 0


function bool Standalone.drawCharacterSprite(u8 character, u8 variant, s16 px, s16 py, bool asSmallGhost)
{
	//Surge's animations will override the normal render
	if (XtraChar == 1 && char.character == CHARACTER_SONIC && variant < 2)
	{//custom render routines
		return SurgeCustomRendering(character, variant, px, py, asSmallGhost)
	}
	else
	{		
		return base.Standalone.drawCharacterSprite(character, variant, px, py, asSmallGhost)
	}
}

function bool SurgeCustomRendering(u8 character, u8 variant, s16 px, s16 py, bool asSmallGhost)
{

	bool isPlayer1 = (variant == 0)
	u32 characterAddress = isPlayer1 ? 0xffffb000 : 0xffffb04a
	u8 animationSprite = char.animation.sprite
	u16 animationSpriteEx = Standalone.getModdedAnimationSpriteEx(character, animationSprite)
	u8 flags = (char.render_flags & 0x03)
	u8 angle = 0
	u64 key = 0
	u8 rotationMode = 0

	//no block for tails' tails
	if (level.vertical_wrap == 0xff00)
	{
		// For vertically wrapping levels, "normalize" py into interval [-move_area.bottom.target * 3/4, -move_area.bottom.target * 1/4]
		py &= level.height.bitmask
		if (py > move_area.bottom.target * 3/4 && move_area.bottom.target >= 0xe0)	// move_area.bottom.target is very low in DEZ boss act
			py -= move_area.bottom.target
	}

	if (variant < 2)
	{
		if (Game.getSetting(SETTING_SMOOTH_ROTATION))
		{
			// Character
			if (animationSprite >= 0x01 && animationSprite <= 0x20)
			{
				animationSprite = 0x01 + (animationSprite - 0x01) % 8
				rotationMode = 1
			}
			else if (animationSprite >= 0x21 && animationSprite <= 0x30)
			{
				animationSprite = 0x21 + (animationSprite - 0x21) % 4
				rotationMode = 1
			}
			else if (animationSprite >= 0x78 && animationSprite <= 0x7f)
			{
				animationSprite = 0x78
				rotationMode = 2
			}

			if (rotationMode != 0)
			{
				s8 oldRotation = isPlayer1 ? oldRotationPlayer1 : oldRotationPlayer2
				flags = char.flags & char.flag.FACING_LEFT		// This really has to be "char.flags", not "char.render_flags"

				angle = char.rotation
				if (rotationMode == 1)
				{
					if (abs(s8(char.rotation)) <= 0x10 && abs(s8(oldRotation)) <= 0x10)
					{
						angle = 0
					}

					if (angle != char.rotation)
					{
						s8 diff = angle - oldRotation
						angle = oldRotation + clamp(diff, -3, 3)
					}
				}
			}

			if (isPlayer1)
				oldRotationPlayer1 = angle
			else
				oldRotationPlayer2 = angle
		}

		//Fake Genesis rotation
		// if (!Game.getSetting(SETTING_SMOOTH_ROTATION))
		// {
		// 	//WALK
		// 	if (animationSprite >= 0x01 && animationSprite <= 0x20)
		// 	{
		// 		angle = (animationSprite - 0x01) / 8 * 0xe0
		// 		if (char.flags & char.flag.FACING_LEFT)
		// 			angle = -angle
		// 		animationSprite = 0x01 + (animationSprite - 0x01) % 8
		// 	}
		// 	//RUN
		// 	else if (animationSprite >= 0x21 && animationSprite <= 0x30)
		// 	{
		// 		angle = (animationSprite - 0x21) / 4 * 0xe0
		// 		if (char.flags & char.flag.FACING_LEFT)
		// 			angle = -angle
		// 		animationSprite = 0x21 + (animationSprite - 0x21) % 4
		// 	}
		// 	//Hanging in AIZ
		// 	else if (animationSprite >= 0x78 && animationSprite <= 0x7f)
		// 	{
		// 		angle = (animationSprite - 0x78) * 0xe0
		// 		if (char.flags & char.flag.FACING_LEFT)
		// 			angle = -angle
		// 		animationSprite = 0x78
		// 	}
		// 	//Hanging in MHZ
		// 	else if (animationSprite >= 0xeb && animationSprite <= 0xee)
		// 	{
		// 		angle = (animationSprite - 0xeb) * 0xe0
		// 		if (char.flags & char.flag.FACING_LEFT)
		// 			angle = -angle
		// 		animationSprite = 0xeb
		// 	}
		// }
		
		if (char.double_jump_state == 2)
		{
			kickrotate += ((char.flags & char.flag.FACING_LEFT) ? -45 : 45)
		}

		if (animationSpriteEx >= 0x100)
		{
			// Special handling for Drop Dash & Super Peel-Out
			if (animationSpriteEx >= CHAR_ANIMSPRITE_SONIC_PEELOUT)
			{
				key = stringformat("sonic_peelout_%d", animationSpriteEx - CHAR_ANIMSPRITE_SONIC_PEELOUT)
			}
			else
			{
				key = stringformat("sonic_dropdash_%d", animationSpriteEx - CHAR_ANIMSPRITE_SONIC_DROPDASH)
			}
		}
	
			
		if (isPlayer1)
			timeattack.animSpriteEx = animationSpriteEx

		if (key == 0)
		{
				key = stringformat("character_surge_0x%02x", animationSprite)

			if (!Renderer.hasCustomSprite(key))
			{
				u32 sourceBase    = (character == CHARACTER_SONIC) ? ((animationSprite >= 0xda) ? 0x140060 : 0x100000) : (character == CHARACTER_TAILS) ? ((animationSprite >= 0xd1) ? 0x143d00 : 0x3200e0) : 0x1200e0
				u32 tableAddress  = (character == CHARACTER_SONIC) ? (super.active ? 0x148378 : 0x148182) : (character == CHARACTER_TAILS) ? 0x14a08a : 0x14bd0a
				u32 mappingOffset = (character == CHARACTER_SONIC) ? (super.active ? 0x146816 : 0x146620) : (character == CHARACTER_TAILS) ? 0x148eb8 : 0x14a8d6		// Not really necessary here, we could also use "char.mapping_offset"

				key = Renderer.setupCustomCharacterSprite(sourceBase, tableAddress, mappingOffset, animationSprite, 0x00)
			}
		}
	}
	else // Tails' tails
	{

	}

	u16 renderQueue = 0xa000 - char.sprite_priority
	u8 atex = (char.sprite_attributes >> 9) & 0x30
	if (EXTENDED_CHARACTER_PALETTES)
		atex = 0x40 + character * 0x20

	if (char.sprite_attributes & 0x8000)
		flags |= SPRITE_FLAG_PRIO

	if (rotationMode != 0 && global.inv_gravity)
	{
		// Correction for inverse gravity
		angle = 128 - angle
		flags ^= SPRITE_FLAG_FLIP_X
	}

	// Render character
	if (asSmallGhost)
	{
		Renderer.drawCustomSprite(key, px, py, atex, flags | SPRITE_FLAG_PRIO, 0xa800, angle, 0xc0ffffff, 0x8000)
	}
	else
	{
		if (char.double_jump_state == 2)
			Renderer.drawCustomSprite(key, px, py, atex, flags, renderQueue, kickrotate, 255)
		else
			Renderer.drawCustomSprite(key, px, py, atex, flags, renderQueue, angle, 255)
	}

	bool useAfterImages
	if (isPlayer1)
	{
		if ((super.active == 0xff) || (super.active.tails == 0xff))
		{
			useAfterImages = true
		}
		else
		{
			if (Game.getSetting(SETTING_SPEEDUP_AFTERIMGS))
			{
				useAfterImages = ((u8[characterAddress + 0x2b] & char.bonus.SPEED_UP) != 0)
			}
		}
	}

	if (useAfterImages)
	{
		// Additional offset for Sonic charging a Super Peel-Out (either Hyper Sonic or with Speed Shoes)
		s16 afterImagesOffsetX = 0
		if (char.spindash == 0x80)
		{
			afterImagesOffsetX = (char.groundspeed >> 7) * ((char.flags & char.flag.FACING_LEFT) ? 1 : -1)
		}

		for (s8 i = 3; i > 0; --i)
		{
			A1 = 0xffffe500 + u8(posbackup.offset.player1 - (i * 8 + 4))
			s16 px0 = u16[A1] - camera.foreground.x.u16 + (i * afterImagesOffsetX / 4)
			s16 py0 = u16[A1+2] - camera.foreground.y.u16
			if (level.vertical_wrap == 0xff00)	// Consider vertical level wrap
				py0 &= level.height.bitmask

			Renderer.setSpriteTagWithPosition(characterAddress + 0x10 + i, px0, py0)
			Renderer.drawCustomSprite(key, px0, py0, atex, flags, renderQueue - i, angle, 192 - i * 32)
		}
	}

	// Prevent emulator-like rendering
	return true

}


// code below is related to custom animations, not complete yet, so don't mess with it please! -haz

//# address-hook(0x012600) end(0x01286c)
//# translated(0x012a2a) end(0x012a6e)
function void UpdateSonicAnimation()
{
	if (XtraChar == 1)
	{
	
		if (char.state == 0x31) // spring twirl support
		{
			base.UpdateSonicAnimation()
			return
		}
	
		if (char.state != char.state.former)
		{
			char.state.former = char.state
			char.animation.frame = 0
			char.animation.timer = 0
			char.flags &= ~char.flag.PUSHING
		}

		A1 = (super.active) ? 0x012c3a : 0x012aa6
		A1 = tableLookupAddress(A1, char.state * 2)
		D0.u8 = u8[A1]

		// D0.u8 is either:
		//  - 0xff when running
		//  - 0xfe when rolling (on ground or in air)
		//  - between 0x00 and 0x7f in other cases (like standing, balancing, spring-jumping, getting hurt, etc.)

		if (char.double_jump_state == 2)
		{
			UpdateSurgeScrewKickAnimation()
		}
		else if (D0.u8 < 0x80)
		{
			updateSonicAnimationStanding()
		}
		else if (D0.u8 == 0xff)
		{
			updateSonicAnimationRunning()
		}
		else
		{
			updateSonicAnimationRolling()
		}
	}
	else
	{
		// not surge, use base function instead
		base.UpdateSonicAnimation()
	}
}

function void UpdateSurgeScrewKickAnimation()
{
	if (char.animation.sprite != 0xbf && char.animation.sprite != 0xc0)
		char.animation.sprite = 0xbf
		
	++char.animation.timer
	
	if (char.animation.timer > 1)
	{
		if (char.animation.sprite == 0xbf)
		{
			++char.animation.sprite
		}
		else
		{
			char.animation.sprite = 0xbf
		}
		
		char.animation.timer = 0
	}
}