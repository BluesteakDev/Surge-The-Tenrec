function void Surge.SpawnLinesEffect()
{
	s16 life
	s16 rotation

	life = 0
	rotation = System.rand() % 361

	Surge.SpawnLinesEffect2(life, rotation)
}

function void Surge.SpawnLinesEffect2(s16 life, s16 rotation)
{
	if (allocDynamicObjectStd())										// Get a memory address (or don't do anything if there is none available)
	{
		objA1.update_address = 0x200069									// Set an update address.
		objA1.render_flags = (render_flag.WORLD | render_flag.VISIBLE)	// Make sure the object renders correctly.

		objA1.box_size.x = 0x40											// Set its draw distance (how far off-screen can it go).
		objA1.box_size.y = 0x40
		
		objA1.position.x.u16 = objA0.position.x.u16						// Same position as the object we spawn from (the monitor).
		objA1.position.y.u16 = objA0.position.y.u16

		LineEffect.Update()
	}
}

//# address-hook(0x200069)
function void LineEffect.Update()
{	
	DrawObject()									// Draw the object (rendering done in the renderhook).
	
	if !(objA0.render_flags & render_flag.VISIBLE)	// Off-screen?
	{
		UnloadObject()								// Then unload. Make sure to do this at the end of the object's update function!
	}
}

function bool Standalone.onWriteToSpriteTable(s16 px, s16 py, u16 renderQueue)
{	
	s16 rotation
	if (objA0.update_address == 0x200069)															// It's our object.
	{
		u64 key = stringformat("hud_lives_icon_Surge", objA0.animation.sprite)								// Set the sprite using the random value from the setup function.
		
		Renderer.drawCustomSprite(key, px, py, 0x00, SPRITE_FLAG_PRIO, 0x9fff, 0, 0xff)			// High priority and renderQueue, to appear above most other things. Put in value26 as the angle, and just give it full opacity.
		return true																					// Make sure to return after!
	}
	return base.Standalone.onWriteToSpriteTable(px, py, renderQueue)								// And then return the base.
}